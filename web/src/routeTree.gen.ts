/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './app/__root'
import { Route as DashboardLayoutRouteImport } from './app/dashboard/layout'
import { Route as nondashboardLayoutRouteImport } from './app/(nondashboard)/layout'
import { Route as authLayoutRouteImport } from './app/(auth)/layout'
import { Route as PageRouteImport } from './app/page'
import { Route as DashboardTenantPageRouteImport } from './app/dashboard/tenant/page'
import { Route as DashboardManagerPageRouteImport } from './app/dashboard/manager/page'
import { Route as nondashboardLandingPageRouteImport } from './app/(nondashboard)/landing/page'
import { Route as authRegisterTenantPageRouteImport } from './app/(auth)/register/tenant/page'
import { Route as authRegisterManagerPageRouteImport } from './app/(auth)/register/manager/page'
import { Route as authLoginTenantPageRouteImport } from './app/(auth)/login/tenant/page'
import { Route as authLoginManagerPageRouteImport } from './app/(auth)/login/manager/page'

const DashboardLayoutRoute = DashboardLayoutRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const nondashboardLayoutRoute = nondashboardLayoutRouteImport.update({
  id: '/(nondashboard)',
  getParentRoute: () => rootRouteImport,
} as any)
const authLayoutRoute = authLayoutRouteImport.update({
  id: '/(auth)',
  getParentRoute: () => rootRouteImport,
} as any)
const PageRoute = PageRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardTenantPageRoute = DashboardTenantPageRouteImport.update({
  id: '/tenant/',
  path: '/tenant/',
  getParentRoute: () => DashboardLayoutRoute,
} as any)
const DashboardManagerPageRoute = DashboardManagerPageRouteImport.update({
  id: '/manager/',
  path: '/manager/',
  getParentRoute: () => DashboardLayoutRoute,
} as any)
const nondashboardLandingPageRoute = nondashboardLandingPageRouteImport.update({
  id: '/landing/',
  path: '/landing/',
  getParentRoute: () => nondashboardLayoutRoute,
} as any)
const authRegisterTenantPageRoute = authRegisterTenantPageRouteImport.update({
  id: '/register/tenant/',
  path: '/register/tenant/',
  getParentRoute: () => authLayoutRoute,
} as any)
const authRegisterManagerPageRoute = authRegisterManagerPageRouteImport.update({
  id: '/register/manager/',
  path: '/register/manager/',
  getParentRoute: () => authLayoutRoute,
} as any)
const authLoginTenantPageRoute = authLoginTenantPageRouteImport.update({
  id: '/login/tenant/',
  path: '/login/tenant/',
  getParentRoute: () => authLayoutRoute,
} as any)
const authLoginManagerPageRoute = authLoginManagerPageRouteImport.update({
  id: '/login/manager/',
  path: '/login/manager/',
  getParentRoute: () => authLayoutRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof nondashboardLayoutRouteWithChildren
  '/dashboard': typeof DashboardLayoutRouteWithChildren
  '/landing': typeof nondashboardLandingPageRoute
  '/dashboard/manager': typeof DashboardManagerPageRoute
  '/dashboard/tenant': typeof DashboardTenantPageRoute
  '/login/manager': typeof authLoginManagerPageRoute
  '/login/tenant': typeof authLoginTenantPageRoute
  '/register/manager': typeof authRegisterManagerPageRoute
  '/register/tenant': typeof authRegisterTenantPageRoute
}
export interface FileRoutesByTo {
  '/': typeof nondashboardLayoutRouteWithChildren
  '/dashboard': typeof DashboardLayoutRouteWithChildren
  '/landing': typeof nondashboardLandingPageRoute
  '/dashboard/manager': typeof DashboardManagerPageRoute
  '/dashboard/tenant': typeof DashboardTenantPageRoute
  '/login/manager': typeof authLoginManagerPageRoute
  '/login/tenant': typeof authLoginTenantPageRoute
  '/register/manager': typeof authRegisterManagerPageRoute
  '/register/tenant': typeof authRegisterTenantPageRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof PageRoute
  '/(auth)': typeof authLayoutRouteWithChildren
  '/(nondashboard)': typeof nondashboardLayoutRouteWithChildren
  '/dashboard': typeof DashboardLayoutRouteWithChildren
  '/(nondashboard)/landing/': typeof nondashboardLandingPageRoute
  '/dashboard/manager/': typeof DashboardManagerPageRoute
  '/dashboard/tenant/': typeof DashboardTenantPageRoute
  '/(auth)/login/manager/': typeof authLoginManagerPageRoute
  '/(auth)/login/tenant/': typeof authLoginTenantPageRoute
  '/(auth)/register/manager/': typeof authRegisterManagerPageRoute
  '/(auth)/register/tenant/': typeof authRegisterTenantPageRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/landing'
    | '/dashboard/manager'
    | '/dashboard/tenant'
    | '/login/manager'
    | '/login/tenant'
    | '/register/manager'
    | '/register/tenant'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard'
    | '/landing'
    | '/dashboard/manager'
    | '/dashboard/tenant'
    | '/login/manager'
    | '/login/tenant'
    | '/register/manager'
    | '/register/tenant'
  id:
    | '__root__'
    | '/'
    | '/(auth)'
    | '/(nondashboard)'
    | '/dashboard'
    | '/(nondashboard)/landing/'
    | '/dashboard/manager/'
    | '/dashboard/tenant/'
    | '/(auth)/login/manager/'
    | '/(auth)/login/tenant/'
    | '/(auth)/register/manager/'
    | '/(auth)/register/tenant/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  PageRoute: typeof PageRoute
  authLayoutRoute: typeof authLayoutRouteWithChildren
  nondashboardLayoutRoute: typeof nondashboardLayoutRouteWithChildren
  DashboardLayoutRoute: typeof DashboardLayoutRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(nondashboard)': {
      id: '/(nondashboard)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof nondashboardLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)': {
      id: '/(auth)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof PageRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/tenant/': {
      id: '/dashboard/tenant/'
      path: '/tenant'
      fullPath: '/dashboard/tenant'
      preLoaderRoute: typeof DashboardTenantPageRouteImport
      parentRoute: typeof DashboardLayoutRoute
    }
    '/dashboard/manager/': {
      id: '/dashboard/manager/'
      path: '/manager'
      fullPath: '/dashboard/manager'
      preLoaderRoute: typeof DashboardManagerPageRouteImport
      parentRoute: typeof DashboardLayoutRoute
    }
    '/(nondashboard)/landing/': {
      id: '/(nondashboard)/landing/'
      path: '/landing'
      fullPath: '/landing'
      preLoaderRoute: typeof nondashboardLandingPageRouteImport
      parentRoute: typeof nondashboardLayoutRoute
    }
    '/(auth)/register/tenant/': {
      id: '/(auth)/register/tenant/'
      path: '/register/tenant'
      fullPath: '/register/tenant'
      preLoaderRoute: typeof authRegisterTenantPageRouteImport
      parentRoute: typeof authLayoutRoute
    }
    '/(auth)/register/manager/': {
      id: '/(auth)/register/manager/'
      path: '/register/manager'
      fullPath: '/register/manager'
      preLoaderRoute: typeof authRegisterManagerPageRouteImport
      parentRoute: typeof authLayoutRoute
    }
    '/(auth)/login/tenant/': {
      id: '/(auth)/login/tenant/'
      path: '/login/tenant'
      fullPath: '/login/tenant'
      preLoaderRoute: typeof authLoginTenantPageRouteImport
      parentRoute: typeof authLayoutRoute
    }
    '/(auth)/login/manager/': {
      id: '/(auth)/login/manager/'
      path: '/login/manager'
      fullPath: '/login/manager'
      preLoaderRoute: typeof authLoginManagerPageRouteImport
      parentRoute: typeof authLayoutRoute
    }
  }
}

interface authLayoutRouteChildren {
  authLoginManagerPageRoute: typeof authLoginManagerPageRoute
  authLoginTenantPageRoute: typeof authLoginTenantPageRoute
  authRegisterManagerPageRoute: typeof authRegisterManagerPageRoute
  authRegisterTenantPageRoute: typeof authRegisterTenantPageRoute
}

const authLayoutRouteChildren: authLayoutRouteChildren = {
  authLoginManagerPageRoute: authLoginManagerPageRoute,
  authLoginTenantPageRoute: authLoginTenantPageRoute,
  authRegisterManagerPageRoute: authRegisterManagerPageRoute,
  authRegisterTenantPageRoute: authRegisterTenantPageRoute,
}

const authLayoutRouteWithChildren = authLayoutRoute._addFileChildren(
  authLayoutRouteChildren,
)

interface nondashboardLayoutRouteChildren {
  nondashboardLandingPageRoute: typeof nondashboardLandingPageRoute
}

const nondashboardLayoutRouteChildren: nondashboardLayoutRouteChildren = {
  nondashboardLandingPageRoute: nondashboardLandingPageRoute,
}

const nondashboardLayoutRouteWithChildren =
  nondashboardLayoutRoute._addFileChildren(nondashboardLayoutRouteChildren)

interface DashboardLayoutRouteChildren {
  DashboardManagerPageRoute: typeof DashboardManagerPageRoute
  DashboardTenantPageRoute: typeof DashboardTenantPageRoute
}

const DashboardLayoutRouteChildren: DashboardLayoutRouteChildren = {
  DashboardManagerPageRoute: DashboardManagerPageRoute,
  DashboardTenantPageRoute: DashboardTenantPageRoute,
}

const DashboardLayoutRouteWithChildren = DashboardLayoutRoute._addFileChildren(
  DashboardLayoutRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  PageRoute: PageRoute,
  authLayoutRoute: authLayoutRouteWithChildren,
  nondashboardLayoutRoute: nondashboardLayoutRouteWithChildren,
  DashboardLayoutRoute: DashboardLayoutRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
